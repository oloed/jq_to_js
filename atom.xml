<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[from jQuery to JavaScript]]></title>
  <link href="http://fromjquerytojavascript.com/atom.xml" rel="self"/>
  <link href="http://fromjquerytojavascript.com/"/>
  <updated>2012-01-06T13:23:42-05:00</updated>
  <id>http://fromjquerytojavascript.com/</id>
  <author>
    <name><![CDATA[from jQuery to Javascript]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Showing and Hiding an Element]]></title>
    <link href="http://fromjquerytojavascript.com/articles/showing-and-hiding-an-element/"/>
    <updated>2012-01-05T10:00:00-05:00</updated>
    <id>http://fromjquerytojavascript.com/articles/showing-and-hiding-an-element</id>
    <content type="html"><![CDATA[<p>A couple of commonly used <a href="http://api.jquery.com/category/effects/">effects</a> in jQuery are the <code>show()</code> and <code>hide()</code> methods. These effects do precisely as named - they show and hide elements on the web page. Let&#8217;s look at a couple of jQuery examples:</p>

<pre><code>$('#foo').show(); // Show the element #foo

$('#foo').hide(); // Hide the element #foo
</code></pre>

<p>These effects are simple to achieve with JavaScript. The first thing we&#8217;ll do is get the element <code>#foo</code> by it&#8217;s <code>id</code> attribute, just like we learned in the <a href="http://fromjquerytojavascript.com/articles/get-element-by-id/">previous article</a>. The second thing we&#8217;ll do is set <code>#foo</code>&#8217;s CSS display property to <code>block</code> to show it or <code>none</code> to hide it. We could also just as easily use any CSS display property other than <code>none</code> to show the element (such as <code>inline</code> or <code>inline-block</code>). Here are the JavaScript examples:</p>

<pre><code>// Show the element #foo
document.getElementById('foo').style.display = 'block'; // could also use 'inline' or 'inline-block'

// Hide the element #foo
document.getElementById('foo').style.display = 'none';
</code></pre>

<p>The first thing you probably noticed is that the jQuery version is significantly less code than the JavaScript version. That will often be the case, but remember we&#8217;re not loading the entire jQuery library in the JavaScript version, so we&#8217;re saving ourselves from having to load all that extra code. This will cut down on page load and script execution time.</p>

<p>A key thing to take away here is that we&#8217;re setting a CSS property with JavaScript. In fact, you can set any CSS property with JavaScript. This is essentially what is going on behind the scenes for the <a href="http://api.jquery.com/category/effects/">effects</a> module of jQuery. We&#8217;ll get more in depth with setting and getting styles in future articles.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://api.jquery.com/show/">jQuery show()</a></li>
<li><a href="http://api.jquery.com/hide/">jQuery hide()</a></li>
<li><a href="http://github.com/jquery/jquery/blob/master/src/effects.js#L19-95">jQuery show() &amp; hide() source</a></li>
<li><a href="https://developer.mozilla.org/en/DOM/document.getElementById">JavaScript getElementById() Method</a></li>
<li><a href="https://developer.mozilla.org/en/DOM/element.style">JavaScript element.style</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting an HTML Element by its ID Attribute]]></title>
    <link href="http://fromjquerytojavascript.com/articles/get-element-by-id/"/>
    <updated>2012-01-02T20:12:00-05:00</updated>
    <id>http://fromjquerytojavascript.com/articles/get-element-by-id</id>
    <content type="html"><![CDATA[<p>One of the greatest features jQuery is known for is its impressive <a href="http://api.jquery.com/category/selectors/">selector</a> engine. Its easy to take for granted the ability to query the DOM for elements by using simple CSS-like syntax. For example, if you wanted to reference an element with an <code>id</code> of &#8220;foo&#8221;, your jQuery script might look like:</p>

<pre><code>$('#foo') // Returns a jQuery object with the id 'foo'
</code></pre>

<p>With JavaScript, it requires a little more effort (and in some cases a lot more effort) to query DOM elements. However, there is one method for getting a single DOM element that is easy to learn and remember, and that is the <code>getElementById()</code> method. It does exactly as its name implies - it allows you to get an element by its <code>id</code> attribute.</p>

<pre><code>document.getElementById('foo') // Returns an Element object with the id 'foo'
</code></pre>

<p>I&#8217;ll admit, this code by itself isn&#8217;t extremely useful, but it is a fundamental building block to being able to access and manipulate elements within a web page. Soon I&#8217;ll show you what you can do with a DOM element once you&#8217;ve selected it, as well as other methods for querying DOM selectors.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://api.jquery.com/id-selector/">jQuery ID Selector</a></li>
<li><a href="https://github.com/jquery/jquery/blob/master/src/core.js#L141-162">jQuery ID Selector Source</a></li>
<li><a href="https://developer.mozilla.org/en/DOM/document.getElementById">JavaScript getElementById() Method</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
